{"version":3,"sources":["index.js"],"names":["ReactDOM","render","useState","parseInt","localStorage","getItem","breakLength","setBreakLength","sessionLength","setSessionLength","timer","setTimer","timerState","setTimerState","timerType","setTimerType","JSON","parse","completedList","setCompletedList","sumOfDay","setSumOfDay","changeLength","name","action","SL","useEffect","setItem","stringify","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","end","Date","now","length","className","onClick","aria-hidden","xlinkHref","minutes","Math","floor","seconds","displayTime","class","x","sum","i","date","getDate","sumOfToday","document","getElementById"],"mappings":"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","file":"static/js/main.87d19b12.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nfunction App() {\n  const [breakLength, setBreakLength] = useState(parseInt(localStorage.getItem(\"BL\")) || 1);\n  const [sessionLength, setSessionLength] = useState(parseInt(localStorage.getItem(\"SL\")) || 1);\n  const [timer, setTimer] = useState(parseInt(localStorage.getItem(\"TM\")) || 60); //60*timer\n  const [timerState, setTimerState] = useState(localStorage.getItem(\"TS\") || \"stopped\"); // \"running\" \"stopped\"\n  const [timerType, setTimerType] = useState(localStorage.getItem(\"TT\") || \"\"); //\"session\" \"break\" \"\"\n  const [completedList, setCompletedList] = useState(\n    (localStorage.getItem(\"CL\") && JSON.parse(localStorage.getItem(\"CL\"))) || []\n  );\n  const [sumOfDay, setSumOfDay] = useState(\n    (localStorage.getItem(\"SD\") && JSON.parse(localStorage.getItem(\"SD\"))) || []\n  );\n\n  useEffect(() => {\n    localStorage.setItem(\"BL\", breakLength);\n    localStorage.setItem(\"SL\", sessionLength);\n    localStorage.setItem(\"TM\", timer);\n    localStorage.setItem(\"TS\", timerState);\n    localStorage.setItem(\"TT\", timerType);\n    localStorage.setItem(\"CL\", JSON.stringify(completedList));\n    localStorage.setItem(\"SD\", JSON.stringify(sumOfDay));\n  });\n\n  function changeLength(name, action) {\n    if (timerType !== \"\") return;\n    const BL = breakLength;\n    const SL = sessionLength;\n    if (name === \"break\") {\n      if (action === \"add\") {\n        setBreakLength(BL < 60 ? BL + 1 : BL);\n      } else {\n        setBreakLength(BL > 1 ? BL - 1 : BL);\n      }\n    } else {\n      if (action === \"add\") {\n        if (SL < 60) {\n          setSessionLength(SL + 1);\n          setTimer(60 * SL + 60);\n        }\n      } else {\n        if (SL > 1) {\n          setSessionLength(SL - 1);\n          setTimer(60 * SL - 60);\n        }\n      }\n    }\n  }\n\n  useInterval(\n    () => {\n      setTimer(timer - 1);\n      if (timer < 1) changeState();\n    },\n    timerState === \"running\" ? 1000 : null\n  );\n\n  function startOrStopSession() {\n    if (timerType === \"\") setTimerType(\"session\");\n    setTimerState(timerState === \"running\" ? \"stopped\" : \"running\");\n  }\n\n  function changeState() {\n    if (timerType === \"session\") {\n      setTimer(60 * breakLength);\n      setTimerType(\"break\");\n      setCompletedList([...completedList, { end: Date.now(), length: sessionLength }]);\n    } else {\n      setTimer(60 * sessionLength);\n      setTimerType(\"session\");\n    }\n  }\n\n  function resetSession() {\n    setTimer(60 * sessionLength);\n    setTimerState(\"stopped\");\n    setTimerType(\"\");\n  }\n  function displayCompleted(i) {\n    console.dir(i.end);\n    const date = new Date(parseInt(i.end));\n    let month = addZero(date.getMonth());\n    let day = addZero(date.getDate());\n    let hour = addZero(date.getHours());\n    let minute = addZero(date.getMinutes());\n    return `${month}.${day}   ${hour}:${minute}`;\n  }\n\n  function sumOfToday(x) {\n    let sum = 0;\n    for (let i = x.length - 1; i >= 0; i--) {\n      const date = new Date(parseInt(x[i].end));\n      if (date.getDate() !== new Date().getDate()) {\n        setSumOfDay([...sumOfDay, { date: date, sum: sum }]);\n        break;\n      }\n      sum += x[i].length;\n    }\n    return sum;\n  }\n  function addZero(x) {\n    return x < 10 ? \"0\" + x : x;\n  }\n\n  function displayTime() {\n    let minutes = Math.floor(timer / 60);\n    let seconds = timer - minutes * 60;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    return minutes + \":\" + seconds;\n  }\n\n  return (\n    <div className={`app ${timerType}`}>\n      <div className=\"title\">Pomodoro</div>\n      <div className=\"label\">\n        <div id=\"break-label\">\n          <div>休息时间</div>\n          <div className=\"length-button\">\n            <button\n              onClick={() => {\n                changeLength(\"break\", \"minus\");\n              }}>\n              <svg className=\"icon\" aria-hidden=\"true\">\n                <use xlinkHref={timerType === \"break\" ? \"#icon-minus-copy\" : \"#icon-minus\"}></use>\n              </svg>\n            </button>\n            <p>{breakLength}</p>\n            <button\n              onClick={() => {\n                changeLength(\"break\", \"add\");\n              }}>\n              <svg className=\"icon\" aria-hidden=\"true\">\n                <use xlinkHref={timerType === \"break\" ? \"#icon-add-copy\" : \"#icon-add\"}></use>\n              </svg>\n            </button>\n          </div>\n        </div>\n        <div id=\"session-label\">\n          <div>番茄时间</div>\n          <div className=\"length-button\">\n            <button\n              onClick={() => {\n                changeLength(\"session\", \"minus\");\n              }}>\n              <svg className=\"icon\" aria-hidden=\"true\">\n                <use xlinkHref={timerType === \"break\" ? \"#icon-minus-copy\" : \"#icon-minus\"}></use>\n              </svg>\n            </button>\n            <p>{sessionLength}</p>\n            <button\n              onClick={() => {\n                changeLength(\"session\", \"add\");\n              }}>\n              <svg className=\"icon\" aria-hidden=\"true\">\n                <use xlinkHref={timerType === \"break\" ? \"#icon-add-copy\" : \"#icon-add\"}></use>\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className=\"clock\">\n        {/* <div id=\"timer-label\">{timerType}</div> */}\n        <div className=\"wrapper\">\n          <div id=\"time-left\">\n            <div>{displayTime()}</div>\n            <div className=\"action-button\">\n              <button onClick={startOrStopSession}>\n                {timerState === \"running\" ? (\n                  <svg className=\"icon\" aria-hidden=\"true\">\n                    <use xlinkHref={timerType === \"break\" ? \"#icon-stop-copy\" : \"#icon-stop\"}></use>\n                  </svg>\n                ) : (\n                  <svg className=\"icon\" aria-hidden=\"true\">\n                    <use xlinkHref={timerType === \"break\" ? \"#icon-start-copy\" : \"#icon-start\"}></use>\n                  </svg>\n                )}\n              </button>\n              <button onClick={resetSession}>\n                <svg className=\"icon\" aria-hidden=\"true\">\n                  <use xlinkHref={timerType === \"break\" ? \"#icon-reset-copy\" : \"#icon-reset\"}></use>\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n        <div class=\"info\">\n          <div className=\"infoTitle\">\n            <svg className=\"icon\" aria-hidden=\"true\">\n              <use xlinkHref={timerType === \"break\" ? \"#icon-completed-copy\" : \"#icon-completed\"}></use>\n            </svg>\n            <p className=\"todayTomato\">今日番茄总计</p>\n            <svg className=\"icon\" aria-hidden=\"true\">\n              <use xlinkHref={timerType === \"break\" ? \"#icon-completed-copy\" : \"#icon-completed\"}></use>\n            </svg>\n          </div>\n          <div className=\"sum\">\n            {sumOfToday(completedList)}\n            <p className=\"min\">分钟</p>\n          </div>\n        </div>\n        {/* <div className=\"completed\">\n          {completedList.map(i => (\n            <li key={i.end}>{displayCompleted(i)}</li>\n          ))}\n        </div> */}\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}